# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3

jobs:

  unit-tests:
    name: CI Units
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Tune Runner VM
        uses: ./.github/actions/tune-runner-vm

      - name: Detect changed files
        id:   changes
        uses: apache/pulsar-test-infra/paths-filter@master
        with:
          filters: .github/changes-filter.yaml

      - name: Check changed files
        id: check_changes
        run: echo "::set-output name=docs_only::${{ fromJSON(steps.changes.outputs.all_count) == fromJSON(steps.changes.outputs.docs_count) && fromJSON(steps.changes.outputs.docs_count) > 0 }}"

      - name: Cache local Maven repository
        if: ${{ steps.check_changes.outputs.docs_only != 'true' }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/pulsar
          key: ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-dependencies-core-modules-
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        if: ${{ steps.check_changes.outputs.docs_only != 'true' }}
        with:
          distribution: 'adopt'
          java-version: 11

      - name: Replace maven's wagon-http version
        if: ${{ steps.check_changes.outputs.docs_only != 'true' }}
        run: |
          MAVEN_HOME=$(mvn -v |grep 'Maven home:' | awk '{ print $3 }')
          if [ -d "$MAVEN_HOME" ]; then
            cd "$MAVEN_HOME/lib"
            rm wagon-http-*-shaded.jar
            curl -O https://repo1.maven.org/maven2/org/apache/maven/wagon/wagon-http/3.4.3/wagon-http-3.4.3-shaded.jar
          fi
      - name: run unit test 'OTHER'
        if: ${{ steps.check_changes.outputs.docs_only != 'true' }}
        run: |
          set -e
          set -o pipefail
          set -o errexit

          # solution for printing output in "set -x" trace mode without tracing the echo calls
          shopt -s expand_aliases
          echo_and_restore_trace() {
            builtin echo "$@"
            [ $trace_enabled -eq 1 ] && set -x || true
          }
          alias echo='{ [[ $- =~ .*x.* ]] && trace_enabled=1 || trace_enabled=0; set +x; } 2> /dev/null; echo_and_restore_trace'
          
          function fail {
            echo $1 >&2
            exit 1
          }

          function retry {
            local n=1
            local max=3
            local delay=10
            while true; do
              "$@" && break || {
                if [[ $n -lt $max ]]; then
                  ((n++))
                  echo "Command failed. Attempt $n/$max:"
                  sleep $delay;
                else
                  fail "The command has failed after $n attempts."
                fi
              }
            done
          }

          retry "$@"
          
          
          MVN_COMMAND='mvn -B -fn -ntp'
          MVN_COMMAND_WITH_RETRY="retry ${MVN_COMMAND}"
          MVN_TEST_COMMAND="${MVN_COMMAND_WITH_RETRY} test"
          echo -n "Test Group : $TEST_GROUP"
          # Test Groups  -- start --
          function broker_group_1() {
            $MVN_TEST_COMMAND -pl pulsar-broker -Dgroups='broker'
          }

          function broker_group_2() {
            $MVN_TEST_COMMAND -pl pulsar-broker -Dgroups='schema,utils,functions-worker,broker-io,broker-discovery,broker-compaction,broker-naming,other'
          }

          function broker_client_api() {
            $MVN_TEST_COMMAND -pl pulsar-broker -Dgroups='broker-api'
          }

          function broker_client_impl() {
            $MVN_TEST_COMMAND -pl pulsar-broker -Dgroups='broker-impl'
          }
          # prints summaries of failed tests to console
          # by using the targer/surefire-reports files
          # works only when testForkCount > 1 since that is when surefire will create reports for individual test classes
          function print_testng_failures() {
            (
              { set +x; } 2>/dev/null
              local testng_failed_file="$1"
              local report_prefix="${2:-Test failure in}"
              local group_title="${3:-Detailed test failures}"
              if [ -f "$testng_failed_file" ]; then
                local testng_report_dir=$(dirname "$testng_failed_file")
                local failed_count=0
                for failed_test_class in $(cat "$testng_failed_file" | grep 'class name=' | perl -p -e 's/.*\"(.*?)\".*/$1/'); do
                  ((failed_count += 1))
                  if [ $failed_count -eq 1 ]; then
                    echo "::endgroup::"
                    echo "::group::${group_title}"
                  fi
                  local test_report_file="${testng_report_dir}/${failed_test_class}.txt"
                  if [ -f "${test_report_file}" ]; then
                    local test_report="$(cat "${test_report_file}" | egrep "^Tests run: " | perl -p -se 's/^(Tests run: .*) <<< FAILURE! - in (.*)$/::warning::$report_prefix $2 - $1/' -- -report_prefix="${report_prefix}")"
                    echo "$test_report"
                    cat "${test_report_file}"
                  fi
                done
              fi
            )
          }

          function broker_flaky() {
            echo "::endgroup::"
            echo "::group::Running quarantined tests"
            $MVN_COMMAND test -pl pulsar-broker -Dgroups='quarantine' -DexcludedGroups='' -DfailIfNoTests=false \
              -DtestForkCount=2 -Dexclude='**/Replicator*Test.java' ||
              print_testng_failures pulsar-broker/target/surefire-reports/testng-failed.xml "Quarantined test failure in" "Quarantined test failures"
            # run quarantined Replicator tests separately
            $MVN_COMMAND test -pl pulsar-broker -Dgroups='quarantine' -DexcludedGroups='' -DfailIfNoTests=false \
              -DtestForkCount=2 -Dinclude='**/Replicator*Test.java' || \
              print_testng_failures pulsar-broker/target/surefire-reports/testng-failed.xml "Quarantined test failure in" "Quarantined Replicator*Test failures"
            echo "::endgroup::"
            echo "::group::Running flaky tests"
            $MVN_TEST_COMMAND -pl pulsar-broker -Dgroups='flaky' -DtestForkCount=2
            echo "::endgroup::"
          }

          function proxy() {
            echo "::endgroup::"
            echo "::group::Running quarantined pulsar-proxy tests"
            $MVN_COMMAND test -pl pulsar-proxy -Dgroups='quarantine' -DexcludedGroups='' -DfailIfNoTests=false ||
              print_testng_failures pulsar-proxy/target/surefire-reports/testng-failed.xml "Quarantined test failure in" "Quarantined test failures"
            echo "::endgroup::"
            echo "::group::Running pulsar-proxy tests"
            $MVN_TEST_COMMAND -pl pulsar-proxy
            echo "::endgroup::"
          }

          function other() {
            $MVN_COMMAND_WITH_RETRY clean install -PbrokerSkipTest \
                                               -Dexclude='org/apache/pulsar/proxy/**/*.java,
                                                          **/ManagedLedgerTest.java,
                                                          **/TestPulsarKeyValueSchemaHandler.java,
                                                          **/PrimitiveSchemaTest.java,
                                                          BlobStoreManagedLedgerOffloaderTest.java'

            $MVN_TEST_COMMAND -pl managed-ledger -Dinclude='**/ManagedLedgerTest.java,
                                                            **/OffloadersCacheTest.java'

            $MVN_TEST_COMMAND -pl pulsar-sql/presto-pulsar-plugin -Dinclude='**/TestPulsarKeyValueSchemaHandler.java'

            $MVN_TEST_COMMAND -pl pulsar-client -Dinclude='**/PrimitiveSchemaTest.java'

            $MVN_TEST_COMMAND -pl tiered-storage/jcloud -Dinclude='**/BlobStoreManagedLedgerOffloaderTest.java'

            echo "::endgroup::"
            local modules_with_quarantined_tests=$(git grep -l '@Test.*"quarantine"' | grep '/src/test/java/' | \
              awk -F '/src/test/java/' '{ print $1 }' | egrep -v 'pulsar-broker|pulsar-proxy' | sort | uniq | \
              perl -0777 -p -e 's/\n(\S)/,$1/g')
            if [ -n "${modules_with_quarantined_tests}" ]; then
              echo "::group::Running quarantined tests outside of pulsar-broker & pulsar-proxy (if any)"
              $MVN_COMMAND -pl "${modules_with_quarantined_tests}" test -Dgroups='quarantine' -DexcludedGroups='' \
                -DfailIfNoTests=false || \
                  echo "::warning::There were test failures in the 'quarantine' test group."
              echo "::endgroup::"
            fi
          }

          # Test Groups  -- end --

          TEST_GROUP='BROKER_FLAKY'

          echo "Test Group : $TEST_GROUP"

          set -x

          case $TEST_GROUP in

            BROKER_GROUP_1)
              broker_group_1
              ;;

            BROKER_GROUP_2)
              broker_group_2
              ;;

            BROKER_CLIENT_API)
              broker_client_api
              ;;

            BROKER_CLIENT_IMPL)
              broker_client_impl
              ;;

            BROKER_FLAKY)
              broker_flaky
              ;;

            PROXY)
              proxy
              ;;

            OTHER)
              other
              ;;

            *)
              echo -n "INVALID TEST GROUP"
              exit 1
              ;;
          esac

      - name: package surefire artifacts
        if: failure()
        run: |
          rm -rf artifacts
          mkdir artifacts
          find . -type d -name "*surefire*" -exec cp --parents -R {} artifacts/ \;
          zip -r artifacts.zip artifacts
      - uses: actions/upload-artifact@master
        name: upload surefire-artifacts
        if: failure()
        with:
          name: surefire-artifacts
          path: artifacts.zip
